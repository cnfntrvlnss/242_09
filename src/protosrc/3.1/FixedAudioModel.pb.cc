// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FixedAudioModel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FixedAudioModel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FixedAudioModel {

namespace {

const ::google::protobuf::Descriptor* TaskHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModelInfo_StatusCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoadResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoadResult_StatusCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_FixedAudioModel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_FixedAudioModel_2eproto() {
  protobuf_AddDesc_FixedAudioModel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FixedAudioModel.proto");
  GOOGLE_CHECK(file != NULL);
  TaskHeader_descriptor_ = file->message_type(0);
  static const int TaskHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskHeader, tasklength_),
  };
  TaskHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskHeader_descriptor_,
      TaskHeader::internal_default_instance(),
      TaskHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskHeader, _has_bits_),
      -1,
      -1,
      sizeof(TaskHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskHeader, _internal_metadata_));
  ResultHeader_descriptor_ = file->message_type(1);
  static const int ResultHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultHeader, resultlength_),
  };
  ResultHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResultHeader_descriptor_,
      ResultHeader::internal_default_instance(),
      ResultHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultHeader, _has_bits_),
      -1,
      -1,
      sizeof(ResultHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultHeader, _internal_metadata_));
  ModelInfo_descriptor_ = file->message_type(2);
  static const int ModelInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, modelurl_),
  };
  ModelInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelInfo_descriptor_,
      ModelInfo::internal_default_instance(),
      ModelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, _has_bits_),
      -1,
      -1,
      sizeof(ModelInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, _internal_metadata_));
  ModelInfo_StatusCode_descriptor_ = ModelInfo_descriptor_->enum_type(0);
  LoadResult_descriptor_ = file->message_type(3);
  static const int LoadResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadResult, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadResult, status_),
  };
  LoadResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoadResult_descriptor_,
      LoadResult::internal_default_instance(),
      LoadResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadResult, _has_bits_),
      -1,
      -1,
      sizeof(LoadResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadResult, _internal_metadata_));
  LoadResult_StatusCode_descriptor_ = LoadResult_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FixedAudioModel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskHeader_descriptor_, TaskHeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResultHeader_descriptor_, ResultHeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelInfo_descriptor_, ModelInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoadResult_descriptor_, LoadResult::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FixedAudioModel_2eproto() {
  TaskHeader_default_instance_.Shutdown();
  delete TaskHeader_reflection_;
  ResultHeader_default_instance_.Shutdown();
  delete ResultHeader_reflection_;
  ModelInfo_default_instance_.Shutdown();
  delete ModelInfo_reflection_;
  LoadResult_default_instance_.Shutdown();
  delete LoadResult_reflection_;
}

void protobuf_InitDefaults_FixedAudioModel_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  TaskHeader_default_instance_.DefaultConstruct();
  ResultHeader_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ModelInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LoadResult_default_instance_.DefaultConstruct();
  TaskHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  ResultHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  ModelInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  LoadResult_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_FixedAudioModel_2eproto_once_);
void protobuf_InitDefaults_FixedAudioModel_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_FixedAudioModel_2eproto_once_,
                 &protobuf_InitDefaults_FixedAudioModel_2eproto_impl);
}
void protobuf_AddDesc_FixedAudioModel_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_FixedAudioModel_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025FixedAudioModel.proto\022\017FixedAudioModel"
    "\" \n\nTaskHeader\022\022\n\ntaskLength\030\001 \002(\007\"$\n\014Re"
    "sultHeader\022\024\n\014resultLength\030\002 \002(\007\"\213\001\n\tMod"
    "elInfo\022\016\n\006taskid\030\001 \002(\t\0225\n\006status\030\002 \002(\0162%"
    ".FixedAudioModel.ModelInfo.StatusCode\022\020\n"
    "\010modelUrl\030\003 \002(\014\"%\n\nStatusCode\022\n\n\006FALURE\020"
    "\000\022\013\n\007SUCCESS\020\001\"{\n\nLoadResult\022\016\n\006taskid\030\001"
    " \002(\t\0226\n\006status\030\002 \002(\0162&.FixedAudioModel.L"
    "oadResult.StatusCode\"%\n\nStatusCode\022\n\n\006FA"
    "LURE\020\000\022\013\n\007SUCCESS\020\001B+\n\030com.thinkit.proto"
    "buf.msgB\017FixedAudioModel", 424);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FixedAudioModel.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FixedAudioModel_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_FixedAudioModel_2eproto_once_);
void protobuf_AddDesc_FixedAudioModel_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_FixedAudioModel_2eproto_once_,
                 &protobuf_AddDesc_FixedAudioModel_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FixedAudioModel_2eproto {
  StaticDescriptorInitializer_FixedAudioModel_2eproto() {
    protobuf_AddDesc_FixedAudioModel_2eproto();
  }
} static_descriptor_initializer_FixedAudioModel_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskHeader::kTaskLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskHeader::TaskHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_FixedAudioModel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:FixedAudioModel.TaskHeader)
}

void TaskHeader::InitAsDefaultInstance() {
}

TaskHeader::TaskHeader(const TaskHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FixedAudioModel.TaskHeader)
}

void TaskHeader::SharedCtor() {
  _cached_size_ = 0;
  tasklength_ = 0u;
}

TaskHeader::~TaskHeader() {
  // @@protoc_insertion_point(destructor:FixedAudioModel.TaskHeader)
  SharedDtor();
}

void TaskHeader::SharedDtor() {
}

void TaskHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskHeader_descriptor_;
}

const TaskHeader& TaskHeader::default_instance() {
  protobuf_InitDefaults_FixedAudioModel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TaskHeader> TaskHeader_default_instance_;

TaskHeader* TaskHeader::New(::google::protobuf::Arena* arena) const {
  TaskHeader* n = new TaskHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:FixedAudioModel.TaskHeader)
  tasklength_ = 0u;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TaskHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FixedAudioModel.TaskHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 taskLength = 1;
      case 1: {
        if (tag == 13) {
          set_has_tasklength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &tasklength_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FixedAudioModel.TaskHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FixedAudioModel.TaskHeader)
  return false;
#undef DO_
}

void TaskHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FixedAudioModel.TaskHeader)
  // required fixed32 taskLength = 1;
  if (has_tasklength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->tasklength(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FixedAudioModel.TaskHeader)
}

::google::protobuf::uint8* TaskHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FixedAudioModel.TaskHeader)
  // required fixed32 taskLength = 1;
  if (has_tasklength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->tasklength(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FixedAudioModel.TaskHeader)
  return target;
}

size_t TaskHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FixedAudioModel.TaskHeader)
  size_t total_size = 0;

  // required fixed32 taskLength = 1;
  if (has_tasklength()) {
    total_size += 1 + 4;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FixedAudioModel.TaskHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FixedAudioModel.TaskHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FixedAudioModel.TaskHeader)
    UnsafeMergeFrom(*source);
  }
}

void TaskHeader::MergeFrom(const TaskHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FixedAudioModel.TaskHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TaskHeader::UnsafeMergeFrom(const TaskHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasklength()) {
      set_tasklength(from.tasklength());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TaskHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FixedAudioModel.TaskHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskHeader::CopyFrom(const TaskHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FixedAudioModel.TaskHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TaskHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskHeader::Swap(TaskHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskHeader::InternalSwap(TaskHeader* other) {
  std::swap(tasklength_, other->tasklength_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskHeader_descriptor_;
  metadata.reflection = TaskHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskHeader

// required fixed32 taskLength = 1;
bool TaskHeader::has_tasklength() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskHeader::set_has_tasklength() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskHeader::clear_has_tasklength() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskHeader::clear_tasklength() {
  tasklength_ = 0u;
  clear_has_tasklength();
}
::google::protobuf::uint32 TaskHeader::tasklength() const {
  // @@protoc_insertion_point(field_get:FixedAudioModel.TaskHeader.taskLength)
  return tasklength_;
}
void TaskHeader::set_tasklength(::google::protobuf::uint32 value) {
  set_has_tasklength();
  tasklength_ = value;
  // @@protoc_insertion_point(field_set:FixedAudioModel.TaskHeader.taskLength)
}

inline const TaskHeader* TaskHeader::internal_default_instance() {
  return &TaskHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultHeader::kResultLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultHeader::ResultHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_FixedAudioModel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:FixedAudioModel.ResultHeader)
}

void ResultHeader::InitAsDefaultInstance() {
}

ResultHeader::ResultHeader(const ResultHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FixedAudioModel.ResultHeader)
}

void ResultHeader::SharedCtor() {
  _cached_size_ = 0;
  resultlength_ = 0u;
}

ResultHeader::~ResultHeader() {
  // @@protoc_insertion_point(destructor:FixedAudioModel.ResultHeader)
  SharedDtor();
}

void ResultHeader::SharedDtor() {
}

void ResultHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultHeader_descriptor_;
}

const ResultHeader& ResultHeader::default_instance() {
  protobuf_InitDefaults_FixedAudioModel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResultHeader> ResultHeader_default_instance_;

ResultHeader* ResultHeader::New(::google::protobuf::Arena* arena) const {
  ResultHeader* n = new ResultHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:FixedAudioModel.ResultHeader)
  resultlength_ = 0u;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResultHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FixedAudioModel.ResultHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 resultLength = 2;
      case 2: {
        if (tag == 21) {
          set_has_resultlength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &resultlength_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FixedAudioModel.ResultHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FixedAudioModel.ResultHeader)
  return false;
#undef DO_
}

void ResultHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FixedAudioModel.ResultHeader)
  // required fixed32 resultLength = 2;
  if (has_resultlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->resultlength(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FixedAudioModel.ResultHeader)
}

::google::protobuf::uint8* ResultHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FixedAudioModel.ResultHeader)
  // required fixed32 resultLength = 2;
  if (has_resultlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->resultlength(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FixedAudioModel.ResultHeader)
  return target;
}

size_t ResultHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FixedAudioModel.ResultHeader)
  size_t total_size = 0;

  // required fixed32 resultLength = 2;
  if (has_resultlength()) {
    total_size += 1 + 4;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FixedAudioModel.ResultHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResultHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FixedAudioModel.ResultHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FixedAudioModel.ResultHeader)
    UnsafeMergeFrom(*source);
  }
}

void ResultHeader::MergeFrom(const ResultHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FixedAudioModel.ResultHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResultHeader::UnsafeMergeFrom(const ResultHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resultlength()) {
      set_resultlength(from.resultlength());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ResultHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FixedAudioModel.ResultHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultHeader::CopyFrom(const ResultHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FixedAudioModel.ResultHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResultHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResultHeader::Swap(ResultHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultHeader::InternalSwap(ResultHeader* other) {
  std::swap(resultlength_, other->resultlength_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultHeader_descriptor_;
  metadata.reflection = ResultHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultHeader

// required fixed32 resultLength = 2;
bool ResultHeader::has_resultlength() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResultHeader::set_has_resultlength() {
  _has_bits_[0] |= 0x00000001u;
}
void ResultHeader::clear_has_resultlength() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResultHeader::clear_resultlength() {
  resultlength_ = 0u;
  clear_has_resultlength();
}
::google::protobuf::uint32 ResultHeader::resultlength() const {
  // @@protoc_insertion_point(field_get:FixedAudioModel.ResultHeader.resultLength)
  return resultlength_;
}
void ResultHeader::set_resultlength(::google::protobuf::uint32 value) {
  set_has_resultlength();
  resultlength_ = value;
  // @@protoc_insertion_point(field_set:FixedAudioModel.ResultHeader.resultLength)
}

inline const ResultHeader* ResultHeader::internal_default_instance() {
  return &ResultHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ModelInfo_StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelInfo_StatusCode_descriptor_;
}
bool ModelInfo_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ModelInfo_StatusCode ModelInfo::FALURE;
const ModelInfo_StatusCode ModelInfo::SUCCESS;
const ModelInfo_StatusCode ModelInfo::StatusCode_MIN;
const ModelInfo_StatusCode ModelInfo::StatusCode_MAX;
const int ModelInfo::StatusCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelInfo::kTaskidFieldNumber;
const int ModelInfo::kStatusFieldNumber;
const int ModelInfo::kModelUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelInfo::ModelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_FixedAudioModel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:FixedAudioModel.ModelInfo)
}

void ModelInfo::InitAsDefaultInstance() {
}

ModelInfo::ModelInfo(const ModelInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FixedAudioModel.ModelInfo)
}

void ModelInfo::SharedCtor() {
  _cached_size_ = 0;
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

ModelInfo::~ModelInfo() {
  // @@protoc_insertion_point(destructor:FixedAudioModel.ModelInfo)
  SharedDtor();
}

void ModelInfo::SharedDtor() {
  taskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelInfo_descriptor_;
}

const ModelInfo& ModelInfo::default_instance() {
  protobuf_InitDefaults_FixedAudioModel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ModelInfo> ModelInfo_default_instance_;

ModelInfo* ModelInfo::New(::google::protobuf::Arena* arena) const {
  ModelInfo* n = new ModelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FixedAudioModel.ModelInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_taskid()) {
      taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0;
    if (has_modelurl()) {
      modelurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FixedAudioModel.ModelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FixedAudioModel.ModelInfo.taskid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .FixedAudioModel.ModelInfo.StatusCode status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FixedAudioModel::ModelInfo_StatusCode_IsValid(value)) {
            set_status(static_cast< ::FixedAudioModel::ModelInfo_StatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_modelUrl;
        break;
      }

      // required bytes modelUrl = 3;
      case 3: {
        if (tag == 26) {
         parse_modelUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_modelurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FixedAudioModel.ModelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FixedAudioModel.ModelInfo)
  return false;
#undef DO_
}

void ModelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FixedAudioModel.ModelInfo)
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FixedAudioModel.ModelInfo.taskid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->taskid(), output);
  }

  // required .FixedAudioModel.ModelInfo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required bytes modelUrl = 3;
  if (has_modelurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->modelurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FixedAudioModel.ModelInfo)
}

::google::protobuf::uint8* ModelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FixedAudioModel.ModelInfo)
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FixedAudioModel.ModelInfo.taskid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .FixedAudioModel.ModelInfo.StatusCode status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required bytes modelUrl = 3;
  if (has_modelurl()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->modelurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FixedAudioModel.ModelInfo)
  return target;
}

size_t ModelInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FixedAudioModel.ModelInfo)
  size_t total_size = 0;

  if (has_taskid()) {
    // required string taskid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taskid());
  }

  if (has_status()) {
    // required .FixedAudioModel.ModelInfo.StatusCode status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (has_modelurl()) {
    // required bytes modelUrl = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->modelurl());
  }

  return total_size;
}
size_t ModelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FixedAudioModel.ModelInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string taskid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taskid());

    // required .FixedAudioModel.ModelInfo.StatusCode status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

    // required bytes modelUrl = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->modelurl());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FixedAudioModel.ModelInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FixedAudioModel.ModelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FixedAudioModel.ModelInfo)
    UnsafeMergeFrom(*source);
  }
}

void ModelInfo::MergeFrom(const ModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FixedAudioModel.ModelInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ModelInfo::UnsafeMergeFrom(const ModelInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_has_taskid();
      taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_modelurl()) {
      set_has_modelurl();
      modelurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelurl_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ModelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FixedAudioModel.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInfo::CopyFrom(const ModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FixedAudioModel.ModelInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ModelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ModelInfo::Swap(ModelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelInfo::InternalSwap(ModelInfo* other) {
  taskid_.Swap(&other->taskid_);
  std::swap(status_, other->status_);
  modelurl_.Swap(&other->modelurl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelInfo_descriptor_;
  metadata.reflection = ModelInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelInfo

// required string taskid = 1;
bool ModelInfo::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelInfo::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelInfo::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelInfo::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_taskid();
}
const ::std::string& ModelInfo::taskid() const {
  // @@protoc_insertion_point(field_get:FixedAudioModel.ModelInfo.taskid)
  return taskid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelInfo::set_taskid(const ::std::string& value) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedAudioModel.ModelInfo.taskid)
}
void ModelInfo::set_taskid(const char* value) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedAudioModel.ModelInfo.taskid)
}
void ModelInfo::set_taskid(const char* value, size_t size) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedAudioModel.ModelInfo.taskid)
}
::std::string* ModelInfo::mutable_taskid() {
  set_has_taskid();
  // @@protoc_insertion_point(field_mutable:FixedAudioModel.ModelInfo.taskid)
  return taskid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModelInfo::release_taskid() {
  // @@protoc_insertion_point(field_release:FixedAudioModel.ModelInfo.taskid)
  clear_has_taskid();
  return taskid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelInfo::set_allocated_taskid(::std::string* taskid) {
  if (taskid != NULL) {
    set_has_taskid();
  } else {
    clear_has_taskid();
  }
  taskid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:FixedAudioModel.ModelInfo.taskid)
}

// required .FixedAudioModel.ModelInfo.StatusCode status = 2;
bool ModelInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
::FixedAudioModel::ModelInfo_StatusCode ModelInfo::status() const {
  // @@protoc_insertion_point(field_get:FixedAudioModel.ModelInfo.status)
  return static_cast< ::FixedAudioModel::ModelInfo_StatusCode >(status_);
}
void ModelInfo::set_status(::FixedAudioModel::ModelInfo_StatusCode value) {
  assert(::FixedAudioModel::ModelInfo_StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FixedAudioModel.ModelInfo.status)
}

// required bytes modelUrl = 3;
bool ModelInfo::has_modelurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelInfo::set_has_modelurl() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelInfo::clear_has_modelurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelInfo::clear_modelurl() {
  modelurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_modelurl();
}
const ::std::string& ModelInfo::modelurl() const {
  // @@protoc_insertion_point(field_get:FixedAudioModel.ModelInfo.modelUrl)
  return modelurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelInfo::set_modelurl(const ::std::string& value) {
  set_has_modelurl();
  modelurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedAudioModel.ModelInfo.modelUrl)
}
void ModelInfo::set_modelurl(const char* value) {
  set_has_modelurl();
  modelurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedAudioModel.ModelInfo.modelUrl)
}
void ModelInfo::set_modelurl(const void* value, size_t size) {
  set_has_modelurl();
  modelurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedAudioModel.ModelInfo.modelUrl)
}
::std::string* ModelInfo::mutable_modelurl() {
  set_has_modelurl();
  // @@protoc_insertion_point(field_mutable:FixedAudioModel.ModelInfo.modelUrl)
  return modelurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModelInfo::release_modelurl() {
  // @@protoc_insertion_point(field_release:FixedAudioModel.ModelInfo.modelUrl)
  clear_has_modelurl();
  return modelurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelInfo::set_allocated_modelurl(::std::string* modelurl) {
  if (modelurl != NULL) {
    set_has_modelurl();
  } else {
    clear_has_modelurl();
  }
  modelurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelurl);
  // @@protoc_insertion_point(field_set_allocated:FixedAudioModel.ModelInfo.modelUrl)
}

inline const ModelInfo* ModelInfo::internal_default_instance() {
  return &ModelInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LoadResult_StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadResult_StatusCode_descriptor_;
}
bool LoadResult_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LoadResult_StatusCode LoadResult::FALURE;
const LoadResult_StatusCode LoadResult::SUCCESS;
const LoadResult_StatusCode LoadResult::StatusCode_MIN;
const LoadResult_StatusCode LoadResult::StatusCode_MAX;
const int LoadResult::StatusCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadResult::kTaskidFieldNumber;
const int LoadResult::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadResult::LoadResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_FixedAudioModel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:FixedAudioModel.LoadResult)
}

void LoadResult::InitAsDefaultInstance() {
}

LoadResult::LoadResult(const LoadResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FixedAudioModel.LoadResult)
}

void LoadResult::SharedCtor() {
  _cached_size_ = 0;
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

LoadResult::~LoadResult() {
  // @@protoc_insertion_point(destructor:FixedAudioModel.LoadResult)
  SharedDtor();
}

void LoadResult::SharedDtor() {
  taskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoadResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadResult_descriptor_;
}

const LoadResult& LoadResult::default_instance() {
  protobuf_InitDefaults_FixedAudioModel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoadResult> LoadResult_default_instance_;

LoadResult* LoadResult::New(::google::protobuf::Arena* arena) const {
  LoadResult* n = new LoadResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadResult::Clear() {
// @@protoc_insertion_point(message_clear_start:FixedAudioModel.LoadResult)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_taskid()) {
      taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoadResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FixedAudioModel.LoadResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FixedAudioModel.LoadResult.taskid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .FixedAudioModel.LoadResult.StatusCode status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FixedAudioModel::LoadResult_StatusCode_IsValid(value)) {
            set_status(static_cast< ::FixedAudioModel::LoadResult_StatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FixedAudioModel.LoadResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FixedAudioModel.LoadResult)
  return false;
#undef DO_
}

void LoadResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FixedAudioModel.LoadResult)
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FixedAudioModel.LoadResult.taskid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->taskid(), output);
  }

  // required .FixedAudioModel.LoadResult.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FixedAudioModel.LoadResult)
}

::google::protobuf::uint8* LoadResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FixedAudioModel.LoadResult)
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FixedAudioModel.LoadResult.taskid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .FixedAudioModel.LoadResult.StatusCode status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FixedAudioModel.LoadResult)
  return target;
}

size_t LoadResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FixedAudioModel.LoadResult)
  size_t total_size = 0;

  if (has_taskid()) {
    // required string taskid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taskid());
  }

  if (has_status()) {
    // required .FixedAudioModel.LoadResult.StatusCode status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t LoadResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FixedAudioModel.LoadResult)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string taskid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taskid());

    // required .FixedAudioModel.LoadResult.StatusCode status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FixedAudioModel.LoadResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoadResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FixedAudioModel.LoadResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FixedAudioModel.LoadResult)
    UnsafeMergeFrom(*source);
  }
}

void LoadResult::MergeFrom(const LoadResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FixedAudioModel.LoadResult)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoadResult::UnsafeMergeFrom(const LoadResult& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_has_taskid();
      taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LoadResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FixedAudioModel.LoadResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadResult::CopyFrom(const LoadResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FixedAudioModel.LoadResult)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoadResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoadResult::Swap(LoadResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadResult::InternalSwap(LoadResult* other) {
  taskid_.Swap(&other->taskid_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadResult_descriptor_;
  metadata.reflection = LoadResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadResult

// required string taskid = 1;
bool LoadResult::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoadResult::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
void LoadResult::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoadResult::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_taskid();
}
const ::std::string& LoadResult::taskid() const {
  // @@protoc_insertion_point(field_get:FixedAudioModel.LoadResult.taskid)
  return taskid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoadResult::set_taskid(const ::std::string& value) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedAudioModel.LoadResult.taskid)
}
void LoadResult::set_taskid(const char* value) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedAudioModel.LoadResult.taskid)
}
void LoadResult::set_taskid(const char* value, size_t size) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedAudioModel.LoadResult.taskid)
}
::std::string* LoadResult::mutable_taskid() {
  set_has_taskid();
  // @@protoc_insertion_point(field_mutable:FixedAudioModel.LoadResult.taskid)
  return taskid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoadResult::release_taskid() {
  // @@protoc_insertion_point(field_release:FixedAudioModel.LoadResult.taskid)
  clear_has_taskid();
  return taskid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoadResult::set_allocated_taskid(::std::string* taskid) {
  if (taskid != NULL) {
    set_has_taskid();
  } else {
    clear_has_taskid();
  }
  taskid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:FixedAudioModel.LoadResult.taskid)
}

// required .FixedAudioModel.LoadResult.StatusCode status = 2;
bool LoadResult::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoadResult::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void LoadResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoadResult::clear_status() {
  status_ = 0;
  clear_has_status();
}
::FixedAudioModel::LoadResult_StatusCode LoadResult::status() const {
  // @@protoc_insertion_point(field_get:FixedAudioModel.LoadResult.status)
  return static_cast< ::FixedAudioModel::LoadResult_StatusCode >(status_);
}
void LoadResult::set_status(::FixedAudioModel::LoadResult_StatusCode value) {
  assert(::FixedAudioModel::LoadResult_StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FixedAudioModel.LoadResult.status)
}

inline const LoadResult* LoadResult::internal_default_instance() {
  return &LoadResult_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace FixedAudioModel

// @@protoc_insertion_point(global_scope)
